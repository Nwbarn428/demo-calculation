{"version":3,"file":"static/js/main.0d852231.js","mappings":"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","sources":["components/ExternalTimberCutting.js","components/InternalTimberCutting.js","components/AbatisCutting.js","components/SaddleCharge.js","components/HastyRoadCrater.js","components/DeliberateCrater.js","components/RelievedFaceCrater.js","App.js","index.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  View, Text, TextInput, ScrollView,\n  StyleSheet, Button, Switch\n} from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\n\nconst explosives = {\n  'M112 (C4)': { re: 1.34, weight: 1.25 },\n  'TNT':        { re: 1.00, weight: 1.00 },\n  'M1 Dynamite':{ re: 0.92, weight: 0.50 },\n};\n\nconst truncate = (num, decimals = 2) => {\n  const factor = Math.pow(10, decimals);\n  return Math.floor(num * factor) / factor;\n};\n\nexport default function ExternalTimberCutting() {\n  const [explosive, setExplosive] = useState('M112 (C4)');\n  const [treeCount, setTreeCount] = useState('1');\n  const [cutCount, setCutCount] = useState('1');\n  const [sizeInput, setSizeInput] = useState('');\n  const [isCircumference, setIsCircumference] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const calculate = () => {\n    const trees = parseInt(treeCount, 10);\n    const cuts  = parseInt(cutCount, 10);\n    const raw   = parseFloat(sizeInput);\n    if (![trees, cuts, raw].every(v => !isNaN(v) && v > 0)) {\n      setResult({ error: 'Enter valid numbers for all inputs.' });\n      return;\n    }\n\n    // Step 1: Convert if necessary\n    const D = truncate(isCircumference ? raw / 3.14 : raw);\n\n    // Step 2: P_TNT = D^2 / 40\n    const pTNT_raw = (D * D) / 40;\n    const pTNT = truncate(pTNT_raw);\n\n    // Step 3: P_explosive = P_TNT / RE\n    const pExpl_raw = pTNT / explosives[explosive].re;\n    const pExpl = truncate(pExpl_raw);\n\n    // Step 4: Packages per charge = ceil(P_expl / pkgWeight)\n    const pkgPerCharge = Math.ceil(pExpl / explosives[explosive].weight);\n\n    // Step 5: Charges = trees × cuts\n    const numCharges = trees * cuts;\n\n    // Step 6: Total packages\n    const totalPkgs = numCharges * pkgPerCharge;\n\n    setResult({ D, pTNT, pExpl, pkgPerCharge, numCharges, totalPkgs });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.subTitle}>Step 1: Critical Information</Text>\n      <Text>Explosive: {explosive}</Text>\n      <Text>Trees: {treeCount}</Text>\n      <Text>Cuts/tree: {cutCount}</Text>\n      <Text>Input: {sizeInput} {isCircumference ? 'circumference' : 'diameter'}</Text>\n      <View style={styles.row}>\n        <Text>Input is circumference</Text>\n        <Switch value={isCircumference} onValueChange={setIsCircumference} />\n      </View>\n\n      <Text style={styles.label}>Choose Explosive:</Text>\n      <Picker\n        selectedValue={explosive}\n        onValueChange={setExplosive}\n        style={styles.picker}\n      >\n        {Object.keys(explosives).map(key => (\n          <Picker.Item label={key} value={key} key={key} />\n        ))}\n      </Picker>\n\n      <Text style={styles.label}>Number of Trees:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={treeCount} onChangeText={setTreeCount} />\n\n      <Text style={styles.label}>Cuts per Tree:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={cutCount} onChangeText={setCutCount} />\n\n      <Text style={styles.label}>Avg Diameter/Circumference:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={sizeInput} onChangeText={setSizeInput} />\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {result && (\n        <View style={styles.resultBox}>\n          {result.error ? (\n            <Text style={styles.error}>{result.error}</Text>\n          ) : (\n            <>\n              <Text style={styles.subTitle}>Calculation Breakdown</Text>\n\n<Text style={styles.step}>\nStep 2:\n</Text>\n<Text style={styles.detail}>\nTNT Equivalent (lbs) = D² ÷ 40  \n= {result.D}² ÷ 40  \n= {result.pTNT} lbs\n</Text>\n\n<Text style={styles.step}>\nStep 3:\n</Text>\n<Text style={styles.detail}>\nLbs of {explosive} = TNT lbs ÷ RE Factor  \n= {result.pTNT} ÷ {explosives[explosive].re}  \n= {result.pExpl} lbs\n</Text>\n\n<Text style={styles.step}>\n</Text>\n<Text style={styles.step}>Step 4:</Text>\n<Text style={styles.detail}>\nPackages per charge = {result.pExpl} ÷ {explosives[explosive].weight}  \n= {(result.pExpl / explosives[explosive].weight).toFixed(2)}  \n→ Rounded up to next whole number = {result.pkgPerCharge} package(s)\n</Text>\n\n\n<Text style={styles.step}>\nStep 5:\n</Text>\n<Text style={styles.detail}>\nTotal Charges = Trees × Cuts  \n= {result.numCharges} charge(s)\n</Text>\n\n<Text style={styles.step}>\nStep 6:\n</Text>\n<Text style={styles.detail}>\nTotal Packages = Charges × Packages per Charge  \n= {result.numCharges} × {result.pkgPerCharge}  \n= {result.totalPkgs} package(s)\n</Text>\n\n            </>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: 20, marginTop: 30 },\n  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 20 },\n  subTitle: { fontSize: 18, fontWeight: '600', marginTop: 15 },\n  label: { fontSize: 16, marginTop: 12 },\n  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, marginTop: 5, borderRadius: 5 },\n  picker: { marginTop: 5, marginBottom: 10 },\n  row: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginVertical: 10 },\n  resultBox: { marginTop: 25, backgroundColor: '#f0f0f0', padding: 15, borderRadius: 8 },\n  error: { color: 'red', fontWeight: 'bold' },step: {\n  fontWeight: 'bold',\n  fontSize: 16,\n  marginTop: 10\n},\ndetail: {\n  fontSize: 15,\n  marginBottom: 8,\n  lineHeight: 22\n}\n\n});\n","import React, { useState } from 'react';\nimport {\n  View, Text, TextInput, ScrollView,\n  StyleSheet, Button, Switch\n} from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\n\nconst explosives = {\n  'M112 (C4)': { re: 1.34, weight: 1.25 },\n  'TNT': { re: 1.00, weight: 1.00 },\n  'M1 Dynamite': { re: 0.92, weight: 0.50 },\n};\n\nconst truncate = (num, decimals = 2) => {\n  const factor = Math.pow(10, decimals);\n  return Math.floor(num * factor) / factor;\n};\n\nexport default function InternalTimberCutting() {\n  const [explosive, setExplosive] = useState('M112 (C4)');\n  const [treeCount, setTreeCount] = useState('1');\n  const [cutCount, setCutCount] = useState('1');\n  const [sizeInput, setSizeInput] = useState('');\n  const [isCircumference, setIsCircumference] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const calculate = () => {\n    const trees = parseInt(treeCount, 10);\n    const cuts = parseInt(cutCount, 10);\n    const raw = parseFloat(sizeInput);\n    if (![trees, cuts, raw].every(v => !isNaN(v) && v > 0)) {\n      setResult({ error: 'Enter valid numbers for all inputs.' });\n      return;\n    }\n\n    const D = truncate(isCircumference ? raw / 3.14 : raw);\n    const pTNT_raw = (D * D) / 250;\n    const pTNT = truncate(pTNT_raw);\n    const pExpl_raw = pTNT / explosives[explosive].re;\n    const pExpl = truncate(pExpl_raw);\n    const pkgPerCharge = Math.ceil(pExpl / explosives[explosive].weight);\n    const numCharges = trees * cuts;\n    const totalPkgs = numCharges * pkgPerCharge;\n\n    setResult({ D, pTNT, pExpl, pkgPerCharge, numCharges, totalPkgs });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Internal Timber Cutting</Text>\n\n      <Text style={styles.subTitle}>Step 1: Critical Information</Text>\n      <Text>Explosive: {explosive}</Text>\n      <Text>Trees: {treeCount}</Text>\n      <Text>Cuts/tree: {cutCount}</Text>\n      <Text>Input: {sizeInput} {isCircumference ? 'circumference' : 'diameter'}</Text>\n      <View style={styles.row}>\n        <Text>Input is circumference</Text>\n        <Switch value={isCircumference} onValueChange={setIsCircumference} />\n      </View>\n\n      <Text style={styles.label}>Choose Explosive:</Text>\n      <Picker\n        selectedValue={explosive}\n        onValueChange={setExplosive}\n        style={styles.picker}\n      >\n        {Object.keys(explosives).map(key => (\n          <Picker.Item label={key} value={key} key={key} />\n        ))}\n      </Picker>\n\n      <Text style={styles.label}>Number of Trees:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={treeCount} onChangeText={setTreeCount} />\n\n      <Text style={styles.label}>Cuts per Tree:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={cutCount} onChangeText={setCutCount} />\n\n      <Text style={styles.label}>Avg Diameter/Circumference:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={sizeInput} onChangeText={setSizeInput} />\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {result && (\n        <View style={styles.resultBox}>\n          {result.error ? (\n            <Text style={styles.error}>{result.error}</Text>\n          ) : (\n            <>\n              <Text style={styles.subTitle}>Calculation Breakdown</Text>\n\n              <Text style={styles.step}>Step 2:</Text>\n              <Text style={styles.detail}>\n                TNT Equivalent (lbs) = D² ÷ 250{'\\n'}\n                = {result.D}² ÷ 250{'\\n'}\n                = {result.pTNT} lbs\n              </Text>\n\n              <Text style={styles.step}>Step 3:</Text>\n              <Text style={styles.detail}>\n                Lbs of {explosive} = TNT lbs ÷ RE Factor{'\\n'}\n                = {result.pTNT} ÷ {explosives[explosive].re}{'\\n'}\n                = {result.pExpl} lbs\n              </Text>\n\n              <Text style={styles.step}>Step 4:</Text>\n              <Text style={styles.detail}>\n                Packages per charge = {result.pExpl} ÷ {explosives[explosive].weight}{'\\n'}\n                = {(result.pExpl / explosives[explosive].weight).toFixed(2)}{'\\n'}\n                → Rounded up to next whole number = {result.pkgPerCharge} package(s)\n              </Text>\n\n              <Text style={styles.step}>Step 5:</Text>\n              <Text style={styles.detail}>\n                Total Charges = Trees × Cuts{'\\n'}\n                = {result.numCharges} charge(s)\n              </Text>\n\n              <Text style={styles.step}>Step 6:</Text>\n              <Text style={styles.detail}>\n                Total Packages = Charges × Packages per Charge{'\\n'}\n                = {result.numCharges} × {result.pkgPerCharge}{'\\n'}\n                = {result.totalPkgs} package(s)\n              </Text>\n            </>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: 20, marginTop: 30 },\n  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 20 },\n  subTitle: { fontSize: 18, fontWeight: '600', marginTop: 15 },\n  label: { fontSize: 16, marginTop: 12 },\n  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, marginTop: 5, borderRadius: 5 },\n  picker: { marginTop: 5, marginBottom: 10 },\n  row: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginVertical: 10 },\n  resultBox: { marginTop: 25, backgroundColor: '#f0f0f0', padding: 15, borderRadius: 8 },\n  error: { color: 'red', fontWeight: 'bold' },\n  step: { fontWeight: 'bold', fontSize: 16, marginTop: 10 },\n  detail: { fontSize: 15, marginBottom: 8, lineHeight: 22 },\n});\n","import React, { useState } from 'react';\nimport {\n  View, Text, TextInput, ScrollView,\n  StyleSheet, Button, Switch\n} from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\n\nconst explosives = {\n  'M112 (C4)': { re: 1.34, weight: 1.25 },\n  'TNT': { re: 1.00, weight: 1.00 },\n  'M1 Dynamite': { re: 0.92, weight: 0.50 },\n};\n\nconst truncate = (num, decimals = 2) => {\n  const factor = Math.pow(10, decimals);\n  return Math.floor(num * factor) / factor;\n};\n\nexport default function AbatisCutting() {\n  const [explosive, setExplosive] = useState('M112 (C4)');\n  const [treeCount, setTreeCount] = useState('1');\n  const [cutCount, setCutCount] = useState('1');\n  const [sizeInput, setSizeInput] = useState('');\n  const [isCircumference, setIsCircumference] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const calculate = () => {\n    const trees = parseInt(treeCount, 10);\n    const cuts = parseInt(cutCount, 10);\n    const raw = parseFloat(sizeInput);\n    if (![trees, cuts, raw].every(v => !isNaN(v) && v > 0)) {\n      setResult({ error: 'Enter valid numbers for all inputs.' });\n      return;\n    }\n\n    const D = truncate(isCircumference ? raw / 3.14 : raw);\n    const pTNT_raw = (D * D) / 50;\n    const pTNT = truncate(pTNT_raw);\n    const pExpl_raw = pTNT / explosives[explosive].re;\n    const pExpl = truncate(pExpl_raw);\n    const pkgPerCharge = Math.ceil(pExpl / explosives[explosive].weight);\n    const numCharges = trees * cuts;\n    const totalPkgs = numCharges * pkgPerCharge;\n\n    setResult({ D, pTNT, pExpl, pkgPerCharge, numCharges, totalPkgs });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Abatis Cutting</Text>\n\n      <Text style={styles.subTitle}>Step 1: Critical Information</Text>\n      <Text>Explosive: {explosive}</Text>\n      <Text>Trees: {treeCount}</Text>\n      <Text>Cuts/tree: {cutCount}</Text>\n      <Text>Input: {sizeInput} {isCircumference ? 'circumference' : 'diameter'}</Text>\n      <View style={styles.row}>\n        <Text>Input is circumference</Text>\n        <Switch value={isCircumference} onValueChange={setIsCircumference} />\n      </View>\n\n      <Text style={styles.label}>Choose Explosive:</Text>\n      <Picker\n        selectedValue={explosive}\n        onValueChange={setExplosive}\n        style={styles.picker}\n      >\n        {Object.keys(explosives).map(key => (\n          <Picker.Item label={key} value={key} key={key} />\n        ))}\n      </Picker>\n\n      <Text style={styles.label}>Number of Trees:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={treeCount} onChangeText={setTreeCount} />\n\n      <Text style={styles.label}>Cuts per Tree:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={cutCount} onChangeText={setCutCount} />\n\n      <Text style={styles.label}>Avg Diameter/Circumference:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={sizeInput} onChangeText={setSizeInput} />\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {result && (\n        <View style={styles.resultBox}>\n          {result.error ? (\n            <Text style={styles.error}>{result.error}</Text>\n          ) : (\n            <>\n              <Text style={styles.subTitle}>Calculation Breakdown</Text>\n\n              <Text style={styles.step}>Step 2:</Text>\n              <Text style={styles.detail}>\n                TNT Equivalent (lbs) = D² ÷ 50{'\\n'}\n                = {result.D}² ÷ 50{'\\n'}\n                = {result.pTNT} lbs\n              </Text>\n\n              <Text style={styles.step}>Step 3:</Text>\n              <Text style={styles.detail}>\n                Lbs of {explosive} = TNT lbs ÷ RE Factor{'\\n'}\n                = {result.pTNT} ÷ {explosives[explosive].re}{'\\n'}\n                = {result.pExpl} lbs\n              </Text>\n\n              <Text style={styles.step}>Step 4:</Text>\n              <Text style={styles.detail}>\n                Packages per charge = {result.pExpl} ÷ {explosives[explosive].weight}{'\\n'}\n                = {(result.pExpl / explosives[explosive].weight).toFixed(2)}{'\\n'}\n                → Rounded up to next whole number = {result.pkgPerCharge} package(s)\n              </Text>\n\n              <Text style={styles.step}>Step 5:</Text>\n              <Text style={styles.detail}>\n                Total Charges = Trees × Cuts{'\\n'}\n                = {result.numCharges} charge(s)\n              </Text>\n\n              <Text style={styles.step}>Step 6:</Text>\n              <Text style={styles.detail}>\n                Total Packages = Charges × Packages per Charge{'\\n'}\n                = {result.numCharges} × {result.pkgPerCharge}{'\\n'}\n                = {result.totalPkgs} package(s)\n              </Text>\n            </>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: 20, marginTop: 30 },\n  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 20 },\n  subTitle: { fontSize: 18, fontWeight: '600', marginTop: 15 },\n  label: { fontSize: 16, marginTop: 12 },\n  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, marginTop: 5, borderRadius: 5 },\n  picker: { marginTop: 5, marginBottom: 10 },\n  row: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginVertical: 10 },\n  resultBox: { marginTop: 25, backgroundColor: '#f0f0f0', padding: 15, borderRadius: 8 },\n  error: { color: 'red', fontWeight: 'bold' },\n  step: { fontWeight: 'bold', fontSize: 16, marginTop: 10 },\n  detail: { fontSize: 15, marginBottom: 8, lineHeight: 22 },\n});\n","import React, { useState } from 'react';\nimport {\n  View, Text, TextInput, ScrollView,\n  StyleSheet, Button, Switch\n} from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\n\nconst packageVolumes = {\n  'M112': 20,\n  'M118': 9,\n};\n\nconst truncate = (num, decimals = 2) => {\n  const factor = Math.pow(10, decimals);\n  return Math.floor(num * factor) / factor;\n};\n\nexport default function SaddleCharge() {\n  const [explosive, setExplosive] = useState('M112');\n  const [targetCount, setTargetCount] = useState('1');\n  const [cutCount, setCutCount] = useState('1');\n  const [inputSize, setInputSize] = useState('');\n  const [isDiameter, setIsDiameter] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const calculate = () => {\n    const targets = parseInt(targetCount, 10);\n    const cuts = parseInt(cutCount, 10);\n    const raw = parseFloat(inputSize);\n    if (![targets, cuts, raw].every(v => !isNaN(v) && v > 0)) {\n      setResult({ error: 'Enter valid numbers for all inputs.' });\n      return;\n    }\n\n    const LA = truncate(isDiameter ? raw * 3.14 : raw);\n    const base = truncate(LA / 2);\n    const volume = truncate(LA * base * 0.5);\n\n    const pkgVolume = packageVolumes[explosive];\n    const pkgPerCharge = Math.ceil(volume / pkgVolume);\n    const numCharges = targets * cuts;\n    const totalPkgs = numCharges * pkgPerCharge;\n\n    setResult({ LA, base, volume, pkgPerCharge, numCharges, totalPkgs });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Saddle Charge</Text>\n\n      <Text style={styles.subTitle}>Step 1: Critical Information</Text>\n      <Text>Explosive: {explosive}</Text>\n      <Text>Targets: {targetCount}</Text>\n      <Text>Cuts/Target: {cutCount}</Text>\n      <Text>Input: {inputSize} {isDiameter ? 'diameter (in)' : 'circumference (in)'}</Text>\n\n      <View style={styles.row}>\n        <Text>Input is diameter</Text>\n        <Switch value={isDiameter} onValueChange={setIsDiameter} />\n      </View>\n\n      <Text style={styles.label}>Choose Explosive:</Text>\n      <Picker\n        selectedValue={explosive}\n        onValueChange={setExplosive}\n        style={styles.picker}\n      >\n        {Object.keys(packageVolumes).map(key => (\n          <Picker.Item label={key} value={key} key={key} />\n        ))}\n      </Picker>\n\n      <Text style={styles.label}>Number of Targets:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={targetCount} onChangeText={setTargetCount} />\n\n      <Text style={styles.label}>Cuts per Target:</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={cutCount} onChangeText={setCutCount} />\n\n      <Text style={styles.label}>Diameter or Circumference (in):</Text>\n      <TextInput style={styles.input} keyboardType=\"numeric\" value={inputSize} onChangeText={setInputSize} />\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {result && (\n        <View style={styles.resultBox}>\n          {result.error ? (\n            <Text style={styles.error}>{result.error}</Text>\n          ) : (\n            <>\n              <Text style={styles.subTitle}>Calculation Breakdown</Text>\n\n              <Text style={styles.step}>Step 1:</Text>\n              <Text style={styles.detail}>\n                Long Axis (LA) = {result.LA} in{\"\\n\"}\n                Base = LA ÷ 2 = {result.base} in\n              </Text>\n\n              <Text style={styles.step}>Step 2:</Text>\n              <Text style={styles.detail}>\n                Volume = LA × Base × 0.5 = {result.volume} in³\n              </Text>\n\n              <Text style={styles.step}>Step 3: N/A</Text>\n\n              <Text style={styles.step}>Step 4:</Text>\n              <Text style={styles.detail}>\n                Packages per charge = Volume ÷ Package Volume = {result.volume} ÷ {packageVolumes[explosive]} = {(result.volume / packageVolumes[explosive]).toFixed(2)}{\"\\n\"}\n                → Rounded up to {result.pkgPerCharge} package(s)\n              </Text>\n\n              <Text style={styles.step}>Step 5:</Text>\n              <Text style={styles.detail}>\n                Charges = Targets × Cuts = {result.numCharges}\n              </Text>\n\n              <Text style={styles.step}>Step 6:</Text>\n              <Text style={styles.detail}>\n                Total Packages = Charges × Packages per charge = {result.totalPkgs}\n              </Text>\n            </>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: 20, marginTop: 30 },\n  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 20 },\n  subTitle: { fontSize: 18, fontWeight: '600', marginTop: 15 },\n  label: { fontSize: 16, marginTop: 12 },\n  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, marginTop: 5, borderRadius: 5 },\n  picker: { marginTop: 5, marginBottom: 10 },\n  row: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginVertical: 10 },\n  resultBox: { marginTop: 25, backgroundColor: '#f0f0f0', padding: 15, borderRadius: 8 },\n  error: { color: 'red', fontWeight: 'bold' },\n  step: { fontWeight: 'bold', fontSize: 16, marginTop: 10 },\n  detail: { fontSize: 15, marginBottom: 8, lineHeight: 22 },\n});\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, ScrollView, Alert } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\n\nconst HastyRoadCrater = () => {\n  const [explosiveType, setExplosiveType] = useState('TNT');\n  const [secondaryExplosive, setSecondaryExplosive] = useState('M112');\n  const [holeDepth, setHoleDepth] = useState('');\n  const [craterLength, setCraterLength] = useState('');\n  const [pkgWeight, setPkgWeight] = useState('');\n  const [secondaryWeight, setSecondaryWeight] = useState('');\n  const [results, setResults] = useState(null);\n\n  const calculate = () => {\n    let depth = parseFloat(holeDepth);\n    const length = parseFloat(craterLength);\n    const weight = parseFloat(pkgWeight);\n    const secondaryPkgWeight = parseFloat(secondaryWeight);\n\n    if (\n      isNaN(depth) ||\n      isNaN(length) ||\n      (explosiveType !== 'Cratering Charge' && isNaN(weight)) ||\n      (explosiveType === 'Cratering Charge' && isNaN(secondaryPkgWeight))\n    ) {\n      Alert.alert('Invalid Input', 'Please enter valid numeric values.');\n      return;\n    }\n\n    if (depth < 5) {\n      Alert.alert('Warning', 'Hole depth must be at least 5 ft. Auto-adjusted to 5 ft.');\n      depth = 5;\n    }\n\n    const rawHoles = Math.ceil((length - 16) / 5) + 1;\n    const numHoles = Math.max(rawHoles, 3);\n\n    let resultsObj = {\n      numHoles\n    };\n\n    if (explosiveType === 'Cratering Charge') {\n      const crateringPerHole = Math.floor(depth / 4);\n      const remainingDepth = depth % 4;\n      const crateringTotal = crateringPerHole * numHoles;\n\n      resultsObj.crateringPerHole = crateringPerHole;\n      resultsObj.crateringTotal = crateringTotal;\n\n      if (remainingDepth > 0) {\n        const remainingLbs = remainingDepth * 10;\n        const secondaryPkgsPerHole = Math.ceil(remainingLbs / secondaryPkgWeight);\n        const secondaryTotal = secondaryPkgsPerHole * numHoles;\n\n        let totalM112Prime = 0;\n        if (secondaryExplosive === 'M112') {\n          totalM112Prime = 2 * numHoles;\n        }\n\n        resultsObj.remainingDepth = remainingDepth;\n        resultsObj.secondaryLbs = remainingLbs;\n        resultsObj.secondaryPkgsPerHole = secondaryPkgsPerHole;\n        resultsObj.secondaryTotal = secondaryTotal;\n        resultsObj.secondaryExplosive = secondaryExplosive;\n        resultsObj.totalM112Prime = totalM112Prime;\n        resultsObj.secondaryGrandTotal = secondaryTotal + totalM112Prime;\n      }\n    } else {\n      const lbsPerHole = depth * 10;\n      const pkgsPerHole = Math.ceil(lbsPerHole / weight);\n      const totalPkgs = pkgsPerHole * numHoles;\n\n      resultsObj.lbsPerHole = lbsPerHole;\n      resultsObj.pkgsPerHole = pkgsPerHole;\n      resultsObj.totalPkgs = totalPkgs;\n    }\n\n    setResults(resultsObj);\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Hasty Road Crater</Text>\n\n      <Text style={styles.label}>Type of Explosive</Text>\n      <Picker\n        selectedValue={explosiveType}\n        onValueChange={setExplosiveType}\n        style={styles.picker}\n      >\n        <Picker.Item label=\"TNT\" value=\"TNT\" />\n        <Picker.Item label=\"M112 (C4)\" value=\"M112\" />\n        <Picker.Item label=\"Cratering Charge\" value=\"Cratering Charge\" />\n      </Picker>\n\n      <Text style={styles.label}>Hole Depth (ft)</Text>\n      <TextInput\n        style={styles.input}\n        keyboardType=\"numeric\"\n        value={holeDepth}\n        onChangeText={setHoleDepth}\n        placeholder=\"Minimum 5 ft\"\n      />\n\n      <Text style={styles.label}>Crater Length (ft)</Text>\n      <TextInput\n        style={styles.input}\n        keyboardType=\"numeric\"\n        value={craterLength}\n        onChangeText={setCraterLength}\n      />\n\n      {explosiveType !== 'Cratering Charge' && (\n        <>\n          <Text style={styles.label}>Package Weight (lbs)</Text>\n          <TextInput\n            style={styles.input}\n            keyboardType=\"numeric\"\n            value={pkgWeight}\n            onChangeText={setPkgWeight}\n          />\n        </>\n      )}\n\n      {explosiveType === 'Cratering Charge' && (\n        <>\n          <Text style={styles.label}>Secondary Explosive</Text>\n          <Picker\n            selectedValue={secondaryExplosive}\n            onValueChange={setSecondaryExplosive}\n            style={styles.picker}\n          >\n            <Picker.Item label=\"M112 (C4)\" value=\"M112\" />\n            <Picker.Item label=\"TNT\" value=\"TNT\" />\n          </Picker>\n\n          <Text style={styles.label}>Secondary Explosive Package Weight (lbs)</Text>\n          <TextInput\n            style={styles.input}\n            keyboardType=\"numeric\"\n            value={secondaryWeight}\n            onChangeText={setSecondaryWeight}\n          />\n        </>\n      )}\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {results && (\n        <View style={styles.results}>\n          <Text style={styles.step}>Step 5:</Text>\n          <Text style={styles.detail}>\n            Number of Holes = (({craterLength} - 16) ÷ 5), round up, then +1 = {results.numHoles} hole(s)\n          </Text>\n\n          {explosiveType === 'Cratering Charge' ? (\n            <>\n              <Text style={styles.step}>Primary Charge:</Text>\n              <Text style={styles.detail}>\n                Cratering Charges = {results.crateringPerHole} per hole × {results.numHoles} holes = {results.crateringTotal}\n              </Text>\n\n              {results.remainingDepth > 0 && (\n                <>\n                  <Text style={styles.step}>Secondary Charge:</Text>\n                  <Text style={styles.detail}>\n                    Remaining depth = {results.remainingDepth} ft × 10 = {results.secondaryLbs} lbs\n                  </Text>\n                  <Text style={styles.detail}>\n                    Packages per hole = {results.secondaryPkgsPerHole}\n                  </Text>\n                  <Text style={styles.detail}>\n                    {results.secondaryPkgsPerHole} × {results.numHoles} = {results.secondaryTotal} {results.secondaryExplosive} packages\n                  </Text>\n\n                  {results.secondaryExplosive === 'M112' && (\n                    <Text style={styles.detail}>\n                      + {results.totalM112Prime} extra M112 for priming → Grand Total: {results.secondaryGrandTotal} M112 packages\n                    </Text>\n                  )}\n                </>\n              )}\n            </>\n          ) : (\n            <>\n              <Text style={styles.step}>Step 2:</Text>\n              <Text style={styles.detail}>\n                Lbs per hole = {holeDepth} × 10 = {results.lbsPerHole} lbs\n              </Text>\n              <Text style={styles.step}>Step 4:</Text>\n              <Text style={styles.detail}>\n                Packages per hole = {results.pkgsPerHole} → Total = {results.totalPkgs} package(s)\n              </Text>\n            </>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    marginTop: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    textAlign: 'center'\n  },\n  label: {\n    marginTop: 12,\n    fontSize: 16\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 5\n  },\n  picker: {\n    marginVertical: 10\n  },\n  results: {\n    marginTop: 20,\n    backgroundColor: '#f0f0f0',\n    padding: 15,\n    borderRadius: 8\n  },\n  step: {\n    fontWeight: 'bold',\n    fontSize: 16,\n    marginTop: 10\n  },\n  detail: {\n    fontSize: 15,\n    marginBottom: 8\n  }\n});\n\nexport default HastyRoadCrater;\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, ScrollView, Alert } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\n\nconst DeliberateCrater = () => {\n  const [craterLength, setCraterLength] = useState('');\n  const [explosiveType, setExplosiveType] = useState('TNT');\n  const [secondaryExplosive, setSecondaryExplosive] = useState('M112');\n  const [results, setResults] = useState(null);\n\n  const explosiveData = {\n    TNT: { reFactor: 1.0, pkgWeight: 1.0 },\n    M112: { reFactor: 1.34, pkgWeight: 1.25 },\n    'Cratering Charge': { reFactor: 1.0, pkgWeight: 40.0 },\n  };\n\n  const calculate = () => {\n    const L = parseFloat(craterLength);\n    if (isNaN(L) || L <= 0) {\n      Alert.alert('Invalid Input', 'Please enter a valid crater length.');\n      return;\n    }\n\n    let N = Math.ceil((L - 16) / 5) + 1;\n    if (N < 3) N = 3;\n\n    // Assign hole depths: alternate between 7 and 5 ft, starting and ending with 7 ft\n    const holeDepths = [];\n    for (let i = 0; i < N; i++) {\n      if (i === 0 || i === N - 1) {\n        holeDepths.push(7);\n      } else {\n        const prevDepth = holeDepths[i - 1];\n        holeDepths.push(prevDepth === 7 ? 5 : 7);\n      }\n    }\n\n    const { reFactor, pkgWeight } = explosiveData[explosiveType];\n    let totalExplosiveWeight = 0;\n    let totalPackages = 0;\n    let m112PrimingPackages = 0;\n\n    holeDepths.forEach((depth) => {\n      let requiredWeight = depth === 5 ? 40 : 80;\n      if (explosiveType === 'Cratering Charge') {\n        requiredWeight = 40;\n      }\n      const adjustedWeight = requiredWeight / reFactor;\n      const packages = Math.ceil(adjustedWeight / pkgWeight);\n      totalExplosiveWeight += requiredWeight;\n      totalPackages += packages;\n    });\n\n    if (explosiveType === 'Cratering Charge' && secondaryExplosive === 'M112') {\n      m112PrimingPackages = 2 * N;\n    }\n\n    setResults({\n      numberOfHoles: N,\n      holeDepths,\n      totalExplosiveWeight,\n      totalPackages,\n      m112PrimingPackages,\n      explosiveType,\n      secondaryExplosive,\n    });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Deliberate Crater Calculator</Text>\n\n      <Text style={styles.label}>Crater Length (ft):</Text>\n      <TextInput\n        style={styles.input}\n        keyboardType=\"numeric\"\n        value={craterLength}\n        onChangeText={setCraterLength}\n        placeholder=\"Enter crater length\"\n      />\n\n      <Text style={styles.label}>Explosive Type:</Text>\n      <Picker\n        selectedValue={explosiveType}\n        onValueChange={(itemValue) => setExplosiveType(itemValue)}\n        style={styles.picker}\n      >\n        <Picker.Item label=\"TNT\" value=\"TNT\" />\n        <Picker.Item label=\"M112 (C4)\" value=\"M112\" />\n        <Picker.Item label=\"Cratering Charge\" value=\"Cratering Charge\" />\n      </Picker>\n\n      {explosiveType === 'Cratering Charge' && (\n        <>\n          <Text style={styles.label}>Secondary Explosive for Priming:</Text>\n          <Picker\n            selectedValue={secondaryExplosive}\n            onValueChange={(itemValue) => setSecondaryExplosive(itemValue)}\n            style={styles.picker}\n          >\n            <Picker.Item label=\"M112 (C4)\" value=\"M112\" />\n            <Picker.Item label=\"TNT\" value=\"TNT\" />\n          </Picker>\n        </>\n      )}\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {results && (\n        <View style={styles.results}>\n          <Text style={styles.resultText}>Number of Holes: {results.numberOfHoles}</Text>\n          <Text style={styles.resultText}>Hole Depths: {results.holeDepths.join(', ')} ft</Text>\n          <Text style={styles.resultText}>\n            Total Explosive Weight: {results.totalExplosiveWeight} lbs\n          </Text>\n          <Text style={styles.resultText}>\n            Total Packages Needed: {results.totalPackages}\n          </Text>\n          {results.m112PrimingPackages > 0 && (\n            <Text style={styles.resultText}>\n              Additional M112 Packages for Priming: {results.m112PrimingPackages}\n            </Text>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    marginTop: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n  label: {\n    marginTop: 12,\n    fontSize: 16,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 5,\n  },\n  picker: {\n    marginVertical: 10,\n  },\n  results: {\n    marginTop: 20,\n    backgroundColor: '#f0f0f0',\n    padding: 15,\n    borderRadius: 8,\n  },\n  resultText: {\n    fontSize: 16,\n    marginBottom: 5,\n  },\n});\n\nexport default DeliberateCrater;\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, ScrollView, Alert } from 'react-native';\n\nconst RelievedFaceCrater = () => {\n  const [craterLength, setCraterLength] = useState('');\n  const [results, setResults] = useState(null);\n\n  const calculate = () => {\n    const L = parseFloat(craterLength);\n    if (isNaN(L) || L < 10) {\n      Alert.alert('Invalid Input', 'Enter a crater length of at least 10 feet.');\n      return;\n    }\n\n    const friendlyHoles = Math.max(Math.ceil((L - 10) / 7) + 1, 3);\n    const enemyHoles = friendlyHoles - 1;\n\n    const crateringCharges = friendlyHoles; // 1 per 5' hole\n    const c4LbsTotal = enemyHoles * 30;\n    const c4Packages = Math.ceil(c4LbsTotal / 1.25);\n\n    const primingM112 = friendlyHoles * 2;\n    const totalM112 = c4Packages + primingM112;\n\n    setResults({\n      friendlyHoles,\n      enemyHoles,\n      crateringCharges,\n      c4Packages,\n      primingM112,\n      totalM112\n    });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Relieved Face Crater</Text>\n\n      <Text style={styles.label}>Length of Crater (ft)</Text>\n      <TextInput\n        style={styles.input}\n        keyboardType=\"numeric\"\n        value={craterLength}\n        onChangeText={setCraterLength}\n        placeholder=\"e.g. 40\"\n      />\n\n      <Button title=\"Calculate\" onPress={calculate} />\n\n      {results && (\n        <View style={styles.results}>\n          <Text style={styles.step}>Step 1:</Text>\n          <Text>Friendly (5') Holes = {results.friendlyHoles}</Text>\n          <Text>Enemy (4') Holes = {results.enemyHoles}</Text>\n\n          <Text style={styles.step}>Step 2:</Text>\n          <Text>Cratering Charges (1 per 5' hole) = {results.crateringCharges}</Text>\n\n          <Text style={styles.step}>Step 3:</Text>\n          <Text>Enemy side requires 30 lbs per hole = {results.enemyHoles * 30} lbs</Text>\n          <Text>→ {results.c4Packages} M112 packages (rounded up)</Text>\n\n          <Text style={styles.step}>Step 4:</Text>\n          <Text>Priming Charges = 2 × {results.friendlyHoles} = {results.primingM112} M112</Text>\n\n          <Text style={styles.step}>Total M112 Packages = {results.totalM112}</Text>\n        </View>\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    marginTop: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 20\n  },\n  label: {\n    fontSize: 16,\n    marginTop: 10\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 5\n  },\n  results: {\n    marginTop: 20,\n    padding: 15,\n    backgroundColor: '#f4f4f4',\n    borderRadius: 10\n  },\n  step: {\n    fontWeight: 'bold',\n    marginTop: 10\n  }\n});\n\nexport default RelievedFaceCrater;\n","import * as React from 'react';\nimport { Text, View, TouchableOpacity, ScrollView, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport ExternalTimberCutting from './components/ExternalTimberCutting';\nimport InternalTimberCutting from './components/InternalTimberCutting';\nimport AbatisCutting from './components/AbatisCutting';\nimport SaddleCharge from './components/SaddleCharge';\nimport { Image } from 'react-native';\nimport HastyRoadCrater from './components/HastyRoadCrater';\nimport DeliberateCrater from './components/DeliberateCrater';\nimport RelievedFaceCrater from './components/RelievedFaceCrater';\n\n\n\n\n\n\nconst Stack = createNativeStackNavigator();\n\nconst categories = [\n  {\n    title: 'Timber Cutting',\n    submenu: ['Internal Charges', 'External Charges', 'Abatis']\n  },\n  {\n    title: 'Steel Cutting',\n    submenu: ['Block Charges', 'Ribbon Charges', 'Diamond Charges', 'Saddle Charges']\n  },\n  {\n    title: 'Cratering Charges',\n    submenu: ['Hasty Road Crater', 'Deliberate Crater', 'Relieved Face Crater']\n  },\n  {\n    title: 'Urban Breaching',\n    submenu: ['Silhouette Charges', 'Flexible Linear Charges', 'C-Charges', 'Water Impulse', 'Strip Charges']\n  },\n  {\n    title: 'Special Charges',\n    submenu: ['Hasty Breaching', 'Platoon Demo Kit', 'Overpressure Effects', 'Tamping/Standoff Mods']\n  },\n  {\n    title: 'Safety & References',\n    submenu: ['NEW Calculator', 'MSD Calculator', 'Safety Checks', 'TM References']\n  }\n];\n\n// Home Screen\nfunction HomeScreen({ navigation }) {\n  return (\n    <ScrollView style={styles.container}>\n  <View style={{ alignItems: 'center', marginBottom: 20 }}>\n  <Image\n    source={require('./assets/engineer.png')}\n    style={styles.castleImage}\n    resizeMode=\"contain\"\n  />\n  <Text style={styles.title}>Demolition Calculator</Text>\n</View>\n\n  {categories.map((cat, index) => (\n    <TouchableOpacity\n  activeOpacity={0.8}\n  key={index}\n  style={styles.card}\n  onPress={() => navigation.navigate('Submenu', { category: cat })}\n>\n      <Text style={styles.cardText}>{cat.title}</Text>\n    </TouchableOpacity>\n  ))}\n\n  <View style={styles.disclaimerBox}>\n    <Text style={styles.disclaimer}>\n      This application is based solely on unclassified, public-domain U.S. Army manuals (FM 5-250 and TM 3-34.82). It is intended for training and educational purposes only. No classified, restricted, or operationally sensitive information is included.\n    </Text>\n    <Text style={styles.disclaimer}>\n      ⚠️ This app may be subject to U.S. ITAR/EAR restrictions. Do not export or share technical data from this app outside the United States without proper authorization.\n    </Text>\n  </View>\n</ScrollView>\n\n  );\n}\n\n// Submenu Screen\nfunction SubmenuScreen({ route, navigation }) {\n  const { category } = route.params;\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>{category.title}</Text>\n      {category.submenu.map((item, idx) => (\n        <TouchableOpacity\n          key={idx}\n          style={styles.card}\n          onPress={() => {\n  if (item === 'External Charges') {\n    navigation.navigate('External Timber Cutting');\n  } else if (item === 'Internal Charges') {\n    navigation.navigate('Internal Timber Cutting');\n  } else if (item === 'Abatis') {\n    navigation.navigate('Abatis Cutting');\n  }else if (item === 'Hasty Road Crater') {\n  navigation.navigate('Hasty Road Crater');\n} else if (item === 'Deliberate Crater') {\n    navigation.navigate('Deliberate Crater');\n  } else if (item === 'Relieved Face Crater') {\n  navigation.navigate('Relieved Face Crater');\n} else if (item === 'Saddle Charges') {\n    navigation.navigate('Saddle Charge');\n  } else {\n    alert(`Module for ${item} not built yet.`);\n  }\n}}\n\n        >\n          <Text style={styles.cardText}>{item}</Text>\n        </TouchableOpacity>\n      ))}\n    </ScrollView>\n  );\n}\n\n// Main App with Navigation Container\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Submenu\" component={SubmenuScreen} />\n        <Stack.Screen name=\"External Timber Cutting\" component={ExternalTimberCutting} />\n        <Stack.Screen name=\"Internal Timber Cutting\" component={InternalTimberCutting} />\n        <Stack.Screen name=\"Abatis Cutting\" component={AbatisCutting} />\n        <Stack.Screen name=\"Saddle Charge\" component={SaddleCharge} />\n        <Stack.Screen name=\"Hasty Road Crater\" component={HastyRoadCrater} />\n        <Stack.Screen name=\"Deliberate Crater\" component={DeliberateCrater} />\n        <Stack.Screen name=\"Relieved Face Crater\" component={RelievedFaceCrater} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    paddingHorizontal: 20,\n    backgroundColor: '#f8f8f8'\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 25,\n    color: '#9E1B32', // Engineer red\n    textTransform: 'uppercase',\n    letterSpacing: 1.2\n  },\n  card: {\n    backgroundColor: '#4B4B4B', // Engineer steel gray\n    padding: 20,\n    marginBottom: 14,\n    borderRadius: 14,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 3 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 5,\n    borderLeftWidth: 5,\n    borderLeftColor: '#9E1B32' // Red accent stripe\n  },\n  cardText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n    letterSpacing: 0.5\n  },\n  disclaimerBox: {\n    marginTop: 30,\n    padding: 15,\n    backgroundColor: '#f4f4f4',\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#aaa',\n    marginBottom: 40,\n    alignItems: 'center'\n  },\n  castleImage: {\n  width: 100,\n  height: 100,\n  marginBottom: 10\n},\n  disclaimer: {\n    fontSize: 13,\n    color: '#444',\n    marginBottom: 8,\n    lineHeight: 18,\n    textAlign: 'center',\n    alignSelf: 'center',\n    maxWidth: '90%'\n  }\n});\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [145], () => (__webpack_require__(3378)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["explosives","re","weight","truncate","num","decimals","factor","Math","pow","floor","ExternalTimberCutting","explosive","setExplosive","useState","treeCount","setTreeCount","cutCount","setCutCount","sizeInput","setSizeInput","isCircumference","setIsCircumference","result","setResult","_jsxs","ScrollView","style","styles","container","children","_jsx","Text","subTitle","View","row","Switch","value","onValueChange","label","Picker","selectedValue","picker","Object","keys","map","key","Item","TextInput","input","keyboardType","onChangeText","Button","title","onPress","calculate","trees","parseInt","cuts","raw","parseFloat","every","v","isNaN","error","D","pTNT","pExpl_raw","pExpl","pkgPerCharge","ceil","numCharges","totalPkgs","resultBox","_Fragment","step","detail","toFixed","StyleSheet","create","padding","marginTop","fontSize","fontWeight","marginBottom","borderWidth","borderColor","borderRadius","flexDirection","alignItems","justifyContent","marginVertical","backgroundColor","color","lineHeight","InternalTimberCutting","AbatisCutting","packageVolumes","SaddleCharge","targetCount","setTargetCount","inputSize","setInputSize","isDiameter","setIsDiameter","targets","LA","base","volume","pkgVolume","textAlign","results","HastyRoadCrater","explosiveType","setExplosiveType","secondaryExplosive","setSecondaryExplosive","holeDepth","setHoleDepth","craterLength","setCraterLength","pkgWeight","setPkgWeight","secondaryWeight","setSecondaryWeight","setResults","placeholder","depth","length","secondaryPkgWeight","Alert","alert","rawHoles","numHoles","max","resultsObj","crateringPerHole","remainingDepth","crateringTotal","remainingLbs","secondaryPkgsPerHole","secondaryTotal","totalM112Prime","secondaryLbs","secondaryGrandTotal","lbsPerHole","pkgsPerHole","resultText","DeliberateCrater","explosiveData","TNT","reFactor","M112","itemValue","L","N","holeDepths","i","push","prevDepth","totalExplosiveWeight","totalPackages","m112PrimingPackages","forEach","requiredWeight","adjustedWeight","packages","numberOfHoles","join","RelievedFaceCrater","friendlyHoles","enemyHoles","crateringCharges","c4LbsTotal","c4Packages","primingM112","totalM112","Stack","createNativeStackNavigator","categories","submenu","HomeScreen","navigation","Image","source","require","castleImage","resizeMode","cat","index","TouchableOpacity","activeOpacity","card","navigate","category","cardText","disclaimerBox","disclaimer","SubmenuScreen","route","params","item","idx","paddingHorizontal","textTransform","letterSpacing","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","borderLeftWidth","borderLeftColor","alignSelf","maxWidth","registerRootComponent","NavigationContainer","Navigator","Screen","name","component","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}